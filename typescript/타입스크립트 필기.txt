타입스크립트 
1강
자바스크립트 (동적언어) : 런타임에 타입 결정 / 오류 발견
자바, 타입스크립트 (정적 언어) : 컴파일 타임에 타입 결정 / 오류 발견

- let const var -> 어떤 타입이던지 모두 변수에 들어갈 수 있다.
- loosely typed 언어는 유연성은 제공하지만, 안정성이 떨어진다.
- strongly typed, state typed 언어는 타입을 변수에 선언한다.
- 타입시스템을 자바스크립트에 적용할 수 있도록 한게 타입스크립트
- 변수, 파라미터, 함수의 반환값에 타입을 지정 (안전하고 예측가능한 자바스크립트 프로그래밍)

- 원시타입 : number, boolean, undefined, string, symbol(ES6), void(any와 반대), null
- 객체타입 : functions, arrays, classes

	let year : number = 2020; // Type Annotation
	
	// parameter Annotation, result type Annotation
	function numNumbers(fN : number, sN : number) : number{ 
		return fN + sN;
	}

- 타입 추론 : 선언문과 실행문을 함께 사용할 때 적용된다. (any타입은 명시적으로 지정할 수도 있음)

	let name = 'KIM'; 	// let name : String
	let age = 20;			// let age : number (이후의 코드에서도 동일함)

	let name;				// let name : any
	name = 'KIM';
	let age;				// let age : any (이후 코드에서 어떤 값이든 바꿔 담을 수 있음)
	age = 20;

2. 개발환경 구성
- npm install -g typescript (안되면 sudo)
- 원하는 ts 파일 생성하고 저장 후 tsc hello.ts
	-> 컴파일이 진행되며 자바스크립트 파일이 생성됨 (트랜스컴파일 과정)
- node hello.js 노드로 파일 실행
- ts.config의 역할 -> 컴파일 이전, 이후 파일을 src폴더와 빌드폴더 나누어서 저장
- tsc --init (thconfig.json 생성)
	- src 에는 ts 파일, build에는 js 파일 넣기
	- tsconfig.json 에서 outDir: "./build" rootDir: "./src" 로 변경해주기
	(src폴더에서 소스코드를 찾고, build에서 컴파일 된 내용을 찾게 됨)
- 이제 그냥 tsc 만 쳐도 바로 컴파일 됨.
	- strict : true 여서 스트릭트 모드 적용됨

- npm init -y : package.json 파일 생성
- npm install nodemon concurrently : 노드몬과 컨커런틀리 패키지 지역적으로 설치
- package.json에 script 명령 추가
	"start:build": "tsc -w", // 타입스크립트 컴파일러로 빌드 진행 할 때 watch모드를 추가	
   	"start:run": "nodemon build/index.js", // 노드몬을 이용해서 index.js 실행하겠다
	"start": "concurrently npm:start:*"		// concurrently를 이용해서 npm start 진행하면서, start로 진행되는 명령 (바로 위의 build와 run)을 모두 수행하겠다! (start:* -> start 아래 전부)
- src와 build에 있는 파일의 이름을 index.ts, index.js로 변경해줌 (test를 위해서)
	- 앞으로는 자동으로 생성될 예정
- npm start 로 실행
- 특정파일을 수정하고 저장하면 자동으로 컴파일과 실행이 이루어짐


