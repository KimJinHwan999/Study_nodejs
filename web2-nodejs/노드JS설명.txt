1.서버
- 서버 : 서빙하는 사람 (이거나 저거를 요청하면 요청한 걸 가져다 줌)
ex) 네이버 서버한테 웹 소설 페이지를 가져달라고 요청 -> 웹 소설 페이지 보여줌
만화 페이지를 가져달라고 요청 -> 네이버 서버는 만화 페이지를 가져다 줌

- 서버 : 요청을 받으면 요청한 내용을 보내주는 프로그램
- 요청 : HTTP 요청 (1. 읽기 2. 쓰기 3. 수정 4. 삭제)
- 1. 읽기(GET) : 페이지 읽게 해주세요 요청
- 2. 쓰기(POST) : 새로운 (글, 댓글, 포스트)를 생성해주세요 요청
- 3. 수정(PUT) : 서버님 put 해주세요 요청
- 4. 삭제(DELETE) : 서버님 delete 해주세요 요청

2. 노드JS? : 자바스크립트 런타임
- 자바스크립트라는 언어 : HTML 에 종속된 언어 (HTML 조작과 변경)
- HTML : 웹페이지에 글 쓰고 그림넣는 언어 (정적, 워드랑 비슷하다고 생각하면 됨)
- HTML 에서 다이나믹한 웹페이지를 구성할 때 자바스크립트로 HTML을 조작하였음 (HTMl 안에 자바스크립트를 끄적였음)
- 자바스크립트의 해석은 브라우저가 담당함
- 브라우저마다 자바스크립트를 해석할 수 있는 엔진이 있다.(크롬 - V8 / 파이어폭스 - 스파이더몽키 / 인터넷 - 차크라)
- 원래 자바스크립트는 그냥 HTML을 꾸미는 역할만 하는 별거 아닌 역할 이었는데, 크롬의 V8이라는 자바스크립트 해석 엔진을 뚝 떼서 살을 붙여 출시한게 Node.JS
- NodeJS를 브라우저내에서 말고도 다른환경에서도 실행할 수 있게 도와주는 역할 (NodeJS는 자바스크립트 실행창, 실행 환경임 (=런타임))
- NodeJS 덕분에 자바스크립트를 프로그래밍 언어처럼 사용하기 시작함. 서버 만들 수도 있음 (쉬움)
- 왜 하필 NodeJS로 서버 만들어? -> Non blockin I/O

3. NodeJS 특징
- Event-driven, Non-blockin I/O
- 일반 언어로 만든 서버
    - 어떤 고객이 영화표 200개 예매(시간이 오래 걸림)
    - 일반 서버는 200개의 요청을 해결할 동안 멈춰있음
    - 그 이후 다음 요청을 받게 됨
    - 중간에 버거운 요청을 만나게 되면 서버가 중지 됨 
- NodeJS 서버
    - 일단 모든 고객에게 모든 요청을 전부 받음
    - 그 다음에 처리 속도가 빠른 것 부터 결과를 가져다 줌 (순서 상관 없이) : Non blocking I/O (막히지 않고 input output 이어감)
    - 강점1 : SNS / 채팅서비스 -> 요청이 매우 많음 (요청이 많거나 오래걸려도 멈추거나 대기시간이 없다)
    (일반 서버도 서버의 스케일링, 멀티쓰레딩으로 가능함)
    - 강점2 : 서버가 짧고 쉬움 (스타트업에서 자주사용 - 나중에 변경도 쉬움(pivoting))
    - 이미지 처리 서버가 필요하면? -> nodejs는 별루.. 웹서비스는 nodejs가 좋다!