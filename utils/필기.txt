1강
------------------------------------------------------------------------------
html의 구조를 바꾸려면 수정이 불편함.
html 작성작업이 귀찮아짐
이미 자바스크립트에 익숙한 웹 개발자들이 만듦.

2008년 -> 크롬에서 동작하는 자바스크립트 개선 위해 V8개발
v8 기반 노드js 개발 -> 자바스크립트를 이용해서 컴퓨터 자체를 제어(파이썬, 자바와 같이)
웹페이지를 자동으로 생성하는 웹 어플리케이션을 개발하고자 함
웹브라우저라는 울타리에 갇혀있던 자바스크립트는 이를 탈출하게 됨 (하나의 언어가 됨)

2강
------------------------------------------------------------------------------
HTML ol태그를 순서가 없는 목록으로 바꾸어달라고 요청이 들어옴
ol -> ul 태그로 교체
페이지 별 태그에 있는 모든 파일의 ol을 전부 ul로 바꿔줘야함 (페이지가 1억개라면..?) -> 노드js!!

노드js는 웹 페이지를 1억개를 저장한게 아니라, 사용자가 요청할 때 마다 순간순간 페이지를 생성한다.
사용자의 참여를 유도하려면 email로 글을 받은 다음에, 페이지를 만들어줘야했다. (사용자 참여 제한되었다)
하지만 노드js로 만든 어플리케이션은 데이터가 존재한다. -> 파일을 직접 제작 가능

php jsp 장고 루비 vs nodeJS와 경쟁관계

3강
------------------------------------------------------------------------------
웹 어플리케이션
HTML
웹 브라우저

Node.js 어플리케이션
자바스크립트			(자바스크립트로 런타임을 실행 -> 어플리케이션을 어떻게 만들것인가?)
Node.js 런타임 		(각자의 운영체제에 설치)

node -v : 버전확인
node : 노드 실행
console.log(); -> 화면출력
ctrl + c 두번 or .exit : node 나가기

노드 js 는 파일을 생성해서 그걸 실행시켜줘야 다른사람들도 볼 수 있게 됨.
원하는 폴더에 파일을 생성하고 (desktop -> nodejs -> helloworld.js)
터미널에서 해당 폴더로 이동. 
	cd ~/Desktop/nodejs (~은 홈디렉토리를 의미)
	pwd 로 현재위치 확인해주기
	ls -al로 현재 위치한 폴더의 모든 파일 확인
	node helloworld.js 해주면 안에 있는 파일 실행시켜줌

4강
------------------------------------------------------------------------------
Node.js Application		(노드 js로 만든 웹어플리케이션을 만들 예정)

Node.js runtime			(각 스텝마다 노드 js 가 갖고 있는 기능 실행해야함)

javascript 				(기능 실행하는 조작장치는 자바스크립트)

5강 (웹서버 만들기)
------------------------------------------------------------------------------
웹브라우저 		<-> 		웹서버 	(요청과 응답)
		   			(아파치)
		   			(Node.js)

사용자가 요청할 때 마다 __dirname + url을 이용해서 파일을 읽어들임 -> 명령어를 통해 그 경로에 해당되는 파일을 읽어서 그 값을 가져옴. -> 그리고 response.end 괄호 안에 위치시키게 됨

6-1, 6-2, (자바스크립트 - Number, String Data type)
------------------------------------------------------------------------------
그냥 숫자 쓰면 number (연산자로 계산 가능)

node syntax/Nubmer.js 로 한칸 아래의 디렉토리에 위치한 파일 실행 가능

7-1, 7-2강 (자바스크립트 - 변수,변수의 활용)
------------------------------------------------------------------------------
변수와 상수 (a = 1;)
1=2;를 넣으면 오류남 (1은 항상 1!)

변수 앞엔 var(variable의 약어) 붙여주기 -> 한번 붙여주면 다음 수정할 땐 var 안붙여도 됨

변수의 활용 : 긴 데이터를 변수처리해서 간단히 표현, 중복을 제거

8강 (자바스크립트 - template Literal)
----------------------------------------------------------------------------- 
\\ : 코드에서 줄바꿈
\n : 실제 프린트 된 글에서 줄바꿈을 해주기 위해선 탈출문자 사용

-> 귀찮으니까 template Literal 사용해주기
var name = hi;
`${name} ${1+1} hello`  : hi 2 hello

9강 (Node.js - URL의 이해)
-----------------------------------------------------------------------------
url은 동일하고 뒤에 ? 뒤에 오는 값이 달라짐

http: (hyper text transfer protocol)  : protocol (통신 규약)

http://opentutorials.org : host (domain) (인터넷에 연결되어있는 컴퓨터의 주소 )

http://opentutorials.org:3000 : port (포트 번호) (컴퓨터가 연결되어 있을 때 3000번 포트에 연결되어 있는 서버와 통신하겠다는 의미)
http를 통해 접속했다? -> 웹서버를 통해 접속했다는 의미 -> 기본값은 80

http://opentutorials.org:3000/main : path

http://opentutorials.org:3000/main?id=HTML&page=12 : query string (시작은 ?)

10강 (Node.js - URL을 통해서 입력된 값 사용하기)
-----------------------------------------------------------------------------



14강, 15강, 16강, 17강 (자바스크립트 - 불린, 비교연산자, 제어문, 조건문)
-----------------------------------------------------------------------------
= 대입연산자
=== 비교연산자 (특별한 이유 없다면 3개 쓰기)

program = 시간에 순서에 따라서 실행되는 것

18강 (노드js - 콘솔에서의 입력값)
-----------------------------------------------------------------------------
input(parameter, argument) -> O -> output (IO : Input, Output)

노드 js 는 들어오는 입력값들을 세 번째 정보부터 받아서 배열로 넣어줌

var args = process.argv; // 파라미터 받는 방법
console.log(args);

node syntax/conditional.js jh 1994

-> 	'/usr/local/bin/node',	(nodejs 런타임위치정보)
  	'/Users/jinhwankim/Desktop/nodejs/web2-nodejs/syntax/conditional.js', (실행시킨 파일 경로)
  	'jh',					(입력값 1) -> 2번째 자리
  	'1994' 					(입력값 2)...(입력값 n)

console.log(agrs[2]); -> jh (2번째 값 가져옴 -> 이걸로 참 거짓 판단해서 조건문 태울 수 있음)

19-1강 (노드js - app제작 notfound 구현)
---------------------------------------------------------------------------



20강 (자바스크립트 - 반복문)
-----------------------------------------------------------------------------
var i = 0;               // 초기값
while(i < 2){            // 조건문
    console.log('C1');
    console.log('C2');
    i = i + 1;           // 반복문
}



21강 (자바스크립트 - 배열)
-----------------------------------------------------------------------------
var arr = ['A', 'B', 'C', 'D'];     // 숫자, 불린 모두 가능
console.log(arr[1]);                // 자릿수는 0부터
console.log(arr[3]);
arr[2] = 3;                         
console.log(arr);
console.log(arr.length);            // 갯수를 셀 때는 1개, 2개... n개
arr.push('E');                      // 데이터 추가
console.log(arr);


21강 (자바스크립트 - 배열과 반복문)
-----------------------------------------------------------------------------

23강 (노드js - 파일목록 알아내기)
-----------------------------------------------------------------------------
var testFolder = './data'; // data폴더의 경로 찾아주기
var fs = require('fs');

fs.readdir(testFolder, function(error, filelist){
    console.log(filelist);  // filelist는 담겨있는 파일의 목록 배열로 반환
});



24강 (노드js - App 제작 : 글 목록 출력하기)
-----------------------------------------------------------------------------



25강 (자바스크립트 - 함수)
-----------------------------------------------------------------------------
중복이 발생하면 유지보수가 어렵고 가독성이 떨어진다.
중복을 제거!! -> 변수, 제어문 + 함수
function f123(){
    console.log(1);
    console.log(2);
    console.log(3);
    console.log(4);
}

f123();

function f(x, y){ // 파라미터(매개변수)
};

sum(2,4); // 아규먼트(인자)

return을 활용하여 함수를 광범위하게 이용하기

28강 (노드js - 동기와 비동기)
-----------------------------------------------------------------------------
동기 : 순서대로
비동기 : 어떤 일이 10시간 걸려? -> 일 시켜놓고 바로 다음 일 처리 (두 가지 일이 동시에 처리)


29강 패키지매니져
npm(nodeJS 에서 가장 광범위하게 사용)
pm2 -> 파일의 수정을 관찰하다가 수정되면 자동으로 프로그램을 껐다가 다시 켜서 확인하게 도와줌
npm install pm2 -g(-g 는 독립된 프로그램이라서 이 컴퓨터 어디에서 사용할 수 있도록 해라 라는 뜻)
pm2 start app.js --watch : watch를 누르면 자동으로 변경을 확인하고 껐다가 켜줌
pm2 monit	: 실행되는 프로그램 보임
q누르면 나가짐
pm2 list 	: 프로세스 보기
pm2 stop main : main 프로그램 끄기
pm2 log : 문제점 로그를 볼 수 있음 (오류확인)

pm2 list
pm2 kill : pm2 로 킨거 다끄기
pm2 start main.js --watch --no-daemon : daemon은 백그라운드로 실행되는 프로그램 
(노데몬이니까 앞에서 보이게 실행 -> 오류가 있다거나, console.log와 같은 것들을 보여주게 함)
(하지만 원하지 않는 타이밍에 서버가 꺼졌다 켜짐)
pm2 start main.js --watch --ignore-watch="data/* sessions" --no-daemon
(파일을 생성하거나 수정하는 경우에 서버가 꺼졌다가 켜진다면, ignore 추가. sessions에 대한 관리도 하고싶다면 띄어쓰고 sessions 추가)


30강 폼
사용자가 서버쪽으로 데이터를 전송하기 위해 HTML 폼 사용
사용자가 입력한 정보를 action속성이 가르키는 서버로 queryString의 형태로 전송
서버에서 데이터를 가져올 때는 get으로, 서버에 데이터를 수정하는 행위를 할 때는 post로


39강 객체
객체는 배열과 함께 정보를 정리하는 수납상자
배열의 핵심은 정보를 정리할 때 '순서'에 따라서 정리
배열에서 각각의 요소는 고유한 숫자로된 식별자가 있음

객체는 순서가 없는 정보를 저장하기에 최적의 수납상자이다
객체는 이름으로 식별자를 따로 부여함

OOP(Object Oriented Programming)



44강 모듈의 형식


45강 보안
npm init (앱을 npm으로 관리하기 위한 시작)
패키지 네임은 기본 디렉토리 이름 (쭉 엔터)

npm install -S sanitize-html(S는 진행하는 프로젝트 에서만 사용 g는 전역적으로 다운)


46 api
fs.readFile -> nodeJS 개발자가 제작한 함수 (인터페이스) 
-> Application Programming Interface (API) : 어떤 프로그래밍 언어를 만나건 조작장치가 궁금하다면 API를 검색하여 문제를 해결하자










