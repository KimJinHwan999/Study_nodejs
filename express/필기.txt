1. 
framework (공통적인 일은 프레임워크가 제작해줌 : 반제품)
Express : NodeJS에서 가장 보편적으로 사용되는 프레임워크

2.
npm install 만 해도 package.json 안의 dependency에 있는 sanitize-html이 다운됨

3.
express 사이트의 getting started에서 확인해보기
npm install express --save : express 설치 (node-modules 안에 express가 추가됨)

const express = require('express')
const app = express()
const port = 3000

app.get('/', (req, res) => {
  res.send('Hello World!')
})

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})

-> 간단하게 서버 실행

4. 홈페이지구현
response.writeHead(200);
response.end(html);

-> response.send(html);  로 한번에 처리

5. 상세페이지구현 (queryString을 통해 전달)
시멘틱 URL-> 주소에 쿼리스트링을 보통 숨김(/page/HTML) 여기서 가져옴
/page를 패스로 설정, /HTML을 콜백함수 안에서 가지고옴

app.get('/page/:pageId', function(request, response){
  response.send(request.params);
});

패스 : /page/:pageId
-> /page/1 로 주소를 검색할 때 request.params = {pageId : 1}; 로 받아올 수 있음
-> 쿼리 스트링이 아닌 패스방식을 통해서 주소 전달하는 라우팅 기법

6.
get 에서 post 로 날아갈 때 get의 패스를 그대로 post도 받아준다.

8.
express의 redirection방법 : response.redirect('넘어갈 path');

9. 미들웨어 - body-parser
third party middleware (남들이 만든 미들 웨어)
그 중에서 body-parser 사용해보기

npm install body-parser
: body : 웹브라우저에서 요청한 정보의 본체
: header : 본체를 설명하는 것

// bodyParser 사용 (폼 데이터 형식 처리)
// bodyParser가 만들어내는 미들웨어를 표현하는 표현식
// 1. 사용자가 요청할 때 마다 바디파서 미들웨어가 실행 됨 
// 2. post 데이터를 내부적으로 분석해서 가져온 다음에 콜백을 호출하도록 약속
// 3. 콜백의 request.body 프로퍼티를 만들어줌
app.use(bodyParser.urlencoded({ extended: false })); 

post로 데이터 받은 곳에서 
- request.body로 받은 데이터를 객체로 파싱할 수 있음

10. 미들웨어 - compression
- 페이지의 데이터 용량이 너무 많으면 비용이 많이 나오게 됨
- 압축을 통해 비용을 줄이자
- 웹서버가 웹브라우저한테 응답할 때, 데이터를 압축해서 보냄 + 이 응답은 ~~ 방식으로 압축했으니 ~~이렇게 푸세요 라고 브라우저한테 알려줌
- 브라우저는 압축된 데이터를 받아 서버가 알려준대로 풀게 됨 (물론 압축을 하고 푸는 비용도 필요하지만, 이게 훨씬 저렴하다)

npm install compression --save
app.use(compression());